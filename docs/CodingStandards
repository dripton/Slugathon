Start with http://www.python.org/doc/essays/styleguide.html

Clarifications:
No tabs in code, period.  Spaces only.
No code past column 79.
Continuation lines should be indented two spaces (half of a full four-space
  indent) past the continued line.  Like this line.

Class names: CapWords
Constants: UPPERCASE_WITH_UNDERSCORES
Others: lower_case_with_underscores
Private: _leading_underscore
Really private: __two_leading_underscores -- tends to break unit tests

Don't use "from package import *"   ("from package import a, b, c" is
  fine -- it's only the "*" that leads to confusion.)

Use only Python code unless C is absolutely necessary.  If you must write
  something in C (e.g. the innermost most speed-critical AI loops), write a
  Python prototype first, both to get the algorithm right in a readable
  manner, and to prove the performance bottleneck is real not a guess.  Use
  C89 standard C for portability -- no gcc extensions, C99 additions, or C++.

Write unit tests for everything that could possibly break.  The GUI layer
  is hard to test, so keep it thin.

Use Glade and libglade for static GUIs.

Avoid unnecessary coupling:
Follow the Law of Demeter.  Objects should only talk to immediately contained
  objects, objects passed in as parameters, and to objects they create.
Contained objects should not hold direct references to their containers.
  (They may indirectly see them through the Observer or Oracle interfaces,
  but should use only the methods allowed by those interfaces.)

Initialize instances as thoroughly as possible in __init__, rather than
  tweaking them after creation.

Raw data should go in separate Python modules with "data" in their names.
  Keep live code out of these modules; they should be easily editable by
  non-programmers.  (Simplified Python is cleaner than XML, and avoids
  needing libraries or custom parsers.)

Keep in mind that everything is event-driven.  Do not use blocking I/O,
  or write blocking functions that take more than 0.01 seconds to execute.

