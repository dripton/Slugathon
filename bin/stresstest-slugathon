#!/usr/bin/env python


__copyright__ = "Copyright (c) 2005-2011 David Ripton"
__license__ = "GNU GPL v2"


"""Script to stress-test Slugathon by running many all-AI games."""


import argparse
import sys
import os
import tempfile

from twisted.internet import reactor, utils
from twisted.python import log

from slugathon.net import config


TEMPDIR = tempfile.gettempdir()


# XXX We never stop the server.
def start_server():
    def1 = utils.getProcessValue(sys.executable,
      ["-m", "slugathon.net.Server"], env=os.environ)
    def1.addCallback(server_exited)
    def1.addErrback(server_failed)


def server_exited(returncode):
    log.msg("server exited with returncode %d" % returncode)


def server_failed(arg):
    log.err("server failed %s" % arg)


def start_game(playername, password, min_players, num_games, time_limit):
    if num_games <= 0:
        log.msg("finished running games")
        reactor.callWhenRunning(reactor.stop)
        return
    def1 = utils.getProcessValue(sys.executable,
      [
          "-m", "slugathon.ai.AIClient",
          "--form-game",
          "--playername", playername,
          "--password", password,
          "--min-players", str(min_players),
          "--time-limit", str(time_limit),
          "--game-name", "stresstest_game_%d" % num_games,
      ],
      env=os.environ)
    def1.addCallback(game_exited, playername, password, min_players,
      time_limit, num_games - 1)
    def1.addErrback(game_failed)


def game_exited(returncode, playername, password, min_players, time_limit,
  num_games):
    log.msg("game exited with returncode %d" % returncode)
    start_game(playername, password, min_players, time_limit, num_games)


def game_failed(arg):
    log.err("game failed %s" % arg)


def main():
    parser = argparse.ArgumentParser(prog="stresstest-slugathon")
    parser.add_argument("-n", "--playername", action="store", type=str)
    parser.add_argument("-a", "--password", action="store", type=str)
    parser.add_argument("-s", "--start-server", action="store_true")
    parser.add_argument("-g", "--num-games", action="store", type=int,
      default=10000000)
    parser.add_argument("--min-players", type=int, default=6)
    parser.add_argument("--time-limit", type=int,
      default=config.DEFAULT_AI_TIME_LIMIT)
    args = parser.parse_args()
    log.startLogging(sys.stdout)
    if args.start_server:
        start_server()
    start_game(args.playername, args.password, args.min_players,
      args.num_games, args.time_limit)
    reactor.run()


if __name__ == "__main__":
    main()
