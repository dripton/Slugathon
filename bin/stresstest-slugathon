#!/usr/bin/env python3


import argparse
import logging
import os
import random
import sys

from twisted.internet import reactor, utils
from twisted.python import log

from slugathon.net import config

__copyright__ = "Copyright (c) 2005-2021 David Ripton"
__license__ = "GNU GPL v2"


"""Script to stress-test the game and train the AI by running many AI games."""


# We never stop the server, but it seems to go down when this script does.
def start_server():
    def1 = utils.getProcessOutputAndValue(
        sys.executable, ["-m", "slugathon.net.Server"], env=os.environ
    )
    def1.addCallback(server_exited)
    def1.addErrback(server_failed)


def server_exited(tup):
    out, err, code = tup
    logging.info(f"server exited with returncode {code} stderr {err}")


def server_failed(arg):
    log.err(f"server failed {arg}")


def start_game(
    playername, password, ai_time_limit, min_players, max_players, num_games
):
    if num_games <= 0:
        logging.info("finished running games")
        reactor.callWhenRunning(reactor.stop)
        return
    num_players = random.randrange(min_players, max_players + 1)
    def1 = utils.getProcessValue(
        sys.executable,
        [
            "-m",
            "slugathon.ai.AIClient",
            "--form-game",
            "--playername",
            playername,
            "--password",
            password,
            "--min-players",
            str(num_players),
            "--max-players",
            str(num_players),
            "--ai-time-limit",
            str(ai_time_limit),
            "--game-name",
            f"stresstest_game_{os.getpid()}_{num_games}",
        ],
        env=os.environ,
    )
    def1.addCallback(
        game_exited,
        playername,
        password,
        ai_time_limit,
        min_players,
        max_players,
        num_games - 1,
    )
    def1.addErrback(game_failed)


def game_exited(
    returncode,
    playername,
    password,
    ai_time_limit,
    min_players,
    max_players,
    num_games,
):
    logging.info(f"{returncode=}")
    if returncode == 0:
        start_game(
            playername,
            password,
            ai_time_limit,
            min_players,
            max_players,
            num_games,
        )
    else:
        reactor.stop()


def game_failed(arg):
    log.err(f"game failed {arg}")


def main():
    parser = argparse.ArgumentParser(prog="stresstest-slugathon")
    parser.add_argument(
        "-n", "--playername", action="store", type=str, default=""
    )
    parser.add_argument(
        "-a", "--password", action="store", type=str, default=""
    )
    parser.add_argument("-s", "--start-server", action="store_true")
    parser.add_argument(
        "-g", "--num-games", action="store", type=int, default=10000000
    )
    parser.add_argument(
        "--ai-time-limit", type=int, default=config.DEFAULT_AI_TIME_LIMIT
    )
    parser.add_argument("--min-players", action="store", type=int, default=2)
    parser.add_argument("--max-players", action="store", type=int, default=6)
    args = parser.parse_args()

    log_observer = log.PythonLoggingObserver()
    log_observer.start()
    formatter = logging.Formatter(
        "%(asctime)s %(filename)s %(funcName)s %(lineno)d %(message)s"
    )
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    logging.getLogger().addHandler(console_handler)
    logging.getLogger().setLevel(logging.DEBUG)

    logging.info(f"starting stresstest")

    if args.start_server:
        start_server()
    start_game(
        args.playername,
        args.password,
        args.ai_time_limit,
        args.min_players,
        args.max_players,
        args.num_games,
    )
    reactor.run()


if __name__ == "__main__":
    main()
